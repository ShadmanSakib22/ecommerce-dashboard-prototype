generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("mongo_url")
}

// -------------------
// ENUMS
// -------------------

enum ProductCategory {
  MOBILES
  LAPTOPS_ACCESSORIES
  WEARABLES
  HEADPHONES_AUDIO
  KITCHEN_DINNING
  MENS_CLOTHING
  WOMENS_CLOTHING
  KIDS_WEAR
  SKINCARE
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum OrderStatus {
  PROCESSED
  SHIPPED
  DELIVERED
  CANCELLED
}

// -------------------
// MODELS
// -------------------

model User {
  id        String    @id @map("_id") // clerkId - using String for clerkId
  email     String    @unique
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  products     Product[]
  sellerOrders Order[]   @relation("SellerOrders")
  buyerOrders  Order[]   @relation("BuyerOrders")
}

// Product Tags (Unique) 
model Tag {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  // Many-to-many relation with Product
  products   Product[] @relation(fields: [productIds], references: [id])
  productIds String[]  @db.ObjectId
}

// Product model
model Product {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String
  images            String[]        // Array of image URLs
  category          ProductCategory
  specifications    Json            // JSON object for flexible specifications
  price             Float
  salePrice         Float?
  quantity          Int
  sku               String          @unique // Made unique for business logic
  enableNegotiation Boolean         @default(false)
  seoTitle          String
  seoDescription    String
  status            ProductStatus   @default(DRAFT)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  // Relations
  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String // String to match User.id (clerkId)

  // Many-to-many relation with Tag
  tags   Tag[]    @relation(fields: [tagIds], references: [id])
  tagIds String[] @db.ObjectId

  // Relation to orders
  orderedItems OrderedProduct[]

  // Indexes for better performance
  @@index([sellerId])
  @@index([category])
  @@index([status])
  @@index([createdAt])
}

// Order model
model Order {
  id                   String      @id @default(auto()) @map("_id") @db.ObjectId
  status               OrderStatus @default(PROCESSED)
  orderPlacedDate      DateTime    @default(now())
  paymentConfirmedDate DateTime?
  buyerName            String
  buyerEmail           String
  shippingAddress      Json        // JSON for flexible address structure
  paymentMethod        String
  total                Float
  shippingFee          Float
  tax                  Float
  discount             Float       @default(0)

  // Relations
  seller   User   @relation("SellerOrders", fields: [sellerId], references: [id])
  sellerId String // String to match User.id (clerkId)
  buyer    User   @relation("BuyerOrders", fields: [buyerId], references: [id])
  buyerId  String // String to match User.id (clerkId)

  items OrderedProduct[]

  // Indexes
  @@index([sellerId])
  @@index([buyerId])
  @@index([status])
  @@index([orderPlacedDate])
}

// Intermediary model for products in an order
model OrderedProduct {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String   @db.ObjectId
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId   String?  @db.ObjectId
  title       String   // Store product title at time of order
  image       String   // Store product image at time of order
  priceAtTime Float    // Store price at time of order
  quantity    Int

  // Indexes
  @@index([orderId])
  @@index([productId])
}
